// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coinmarket.proto

package coinmarket

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ScoreData struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Score                float32  `protobuf:"fixed32,2,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScoreData) Reset()         { *m = ScoreData{} }
func (m *ScoreData) String() string { return proto.CompactTextString(m) }
func (*ScoreData) ProtoMessage()    {}
func (*ScoreData) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f5b7aed6dc45af, []int{0}
}

func (m *ScoreData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScoreData.Unmarshal(m, b)
}
func (m *ScoreData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScoreData.Marshal(b, m, deterministic)
}
func (m *ScoreData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreData.Merge(m, src)
}
func (m *ScoreData) XXX_Size() int {
	return xxx_messageInfo_ScoreData.Size(m)
}
func (m *ScoreData) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreData.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreData proto.InternalMessageInfo

func (m *ScoreData) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ScoreData) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type ScoreResponse struct {
	Scores               map[string]*ScoreData `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ScoreResponse) Reset()         { *m = ScoreResponse{} }
func (m *ScoreResponse) String() string { return proto.CompactTextString(m) }
func (*ScoreResponse) ProtoMessage()    {}
func (*ScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f5b7aed6dc45af, []int{1}
}

func (m *ScoreResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScoreResponse.Unmarshal(m, b)
}
func (m *ScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScoreResponse.Marshal(b, m, deterministic)
}
func (m *ScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreResponse.Merge(m, src)
}
func (m *ScoreResponse) XXX_Size() int {
	return xxx_messageInfo_ScoreResponse.Size(m)
}
func (m *ScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreResponse proto.InternalMessageInfo

func (m *ScoreResponse) GetScores() map[string]*ScoreData {
	if m != nil {
		return m.Scores
	}
	return nil
}

type ScoreRequest struct {
	Symbols              []string `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScoreRequest) Reset()         { *m = ScoreRequest{} }
func (m *ScoreRequest) String() string { return proto.CompactTextString(m) }
func (*ScoreRequest) ProtoMessage()    {}
func (*ScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92f5b7aed6dc45af, []int{2}
}

func (m *ScoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScoreRequest.Unmarshal(m, b)
}
func (m *ScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScoreRequest.Marshal(b, m, deterministic)
}
func (m *ScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreRequest.Merge(m, src)
}
func (m *ScoreRequest) XXX_Size() int {
	return xxx_messageInfo_ScoreRequest.Size(m)
}
func (m *ScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreRequest proto.InternalMessageInfo

func (m *ScoreRequest) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func init() {
	proto.RegisterType((*ScoreData)(nil), "ScoreData")
	proto.RegisterType((*ScoreResponse)(nil), "ScoreResponse")
	proto.RegisterMapType((map[string]*ScoreData)(nil), "ScoreResponse.ScoresEntry")
	proto.RegisterType((*ScoreRequest)(nil), "ScoreRequest")
}

func init() { proto.RegisterFile("coinmarket.proto", fileDescriptor_92f5b7aed6dc45af) }

var fileDescriptor_92f5b7aed6dc45af = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xbf, 0x6e, 0xc3, 0x20,
	0x10, 0x87, 0x85, 0xa3, 0xb8, 0xf5, 0xb9, 0xa9, 0xa2, 0x53, 0x55, 0x21, 0x4f, 0xc8, 0x13, 0x5d,
	0x18, 0xe8, 0xd0, 0x3f, 0x6b, 0x1b, 0x75, 0x27, 0x4f, 0x40, 0x22, 0x86, 0x2a, 0x89, 0x49, 0x81,
	0x54, 0xf2, 0x2b, 0xf4, 0xa9, 0x2b, 0x03, 0xb1, 0xec, 0xed, 0xbe, 0xbb, 0x83, 0xdf, 0xa7, 0x83,
	0xf5, 0xde, 0x7e, 0x77, 0x27, 0xed, 0x0e, 0x26, 0x88, 0xb3, 0xb3, 0xc1, 0xb6, 0x6f, 0x50, 0x6d,
	0xf7, 0xd6, 0x99, 0x4f, 0x1d, 0x34, 0x3e, 0x42, 0xb9, 0xed, 0x4f, 0x3b, 0x7b, 0xa4, 0x84, 0x11,
	0x5e, 0xa9, 0x4c, 0xf8, 0x00, 0xcb, 0xb8, 0x44, 0x0b, 0x46, 0x78, 0xa1, 0x12, 0xb4, 0x7f, 0x04,
	0x56, 0xb1, 0x52, 0xc6, 0x9f, 0x6d, 0xe7, 0x0d, 0x4a, 0x28, 0xfd, 0xd0, 0xf0, 0x94, 0xb0, 0x05,
	0xaf, 0x65, 0x23, 0x66, 0xf3, 0x44, 0x7e, 0xd3, 0x05, 0xd7, 0xab, 0xbc, 0xd9, 0x6c, 0xa0, 0x9e,
	0xb4, 0x71, 0x0d, 0x8b, 0x83, 0xe9, 0x73, 0xfe, 0x50, 0x22, 0x83, 0xe5, 0xaf, 0x3e, 0x5e, 0x52,
	0x78, 0x2d, 0x41, 0x8c, 0xbe, 0x2a, 0x0d, 0xde, 0x8b, 0x57, 0xd2, 0x72, 0xb8, 0xcb, 0x59, 0x3f,
	0x17, 0xe3, 0x03, 0x52, 0xb8, 0xf1, 0x51, 0x3e, 0xb9, 0x54, 0xea, 0x8a, 0xf2, 0x05, 0xe0, 0x63,
	0xbc, 0x02, 0x3e, 0xc1, 0xed, 0x97, 0x09, 0xf1, 0x29, 0xae, 0xc4, 0xf4, 0x8b, 0xe6, 0x7e, 0x6e,
	0xbf, 0x2b, 0xe3, 0xc5, 0x9e, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x44, 0x85, 0x98, 0x45,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoinmarketClient is the client API for Coinmarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoinmarketClient interface {
	GetScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error)
}

type coinmarketClient struct {
	cc *grpc.ClientConn
}

func NewCoinmarketClient(cc *grpc.ClientConn) CoinmarketClient {
	return &coinmarketClient{cc}
}

func (c *coinmarketClient) GetScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (*ScoreResponse, error) {
	out := new(ScoreResponse)
	err := c.cc.Invoke(ctx, "/Coinmarket/GetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinmarketServer is the server API for Coinmarket service.
type CoinmarketServer interface {
	GetScore(context.Context, *ScoreRequest) (*ScoreResponse, error)
}

// UnimplementedCoinmarketServer can be embedded to have forward compatible implementations.
type UnimplementedCoinmarketServer struct {
}

func (*UnimplementedCoinmarketServer) GetScore(ctx context.Context, req *ScoreRequest) (*ScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}

func RegisterCoinmarketServer(s *grpc.Server, srv CoinmarketServer) {
	s.RegisterService(&_Coinmarket_serviceDesc, srv)
}

func _Coinmarket_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinmarketServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Coinmarket/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinmarketServer).GetScore(ctx, req.(*ScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coinmarket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Coinmarket",
	HandlerType: (*CoinmarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScore",
			Handler:    _Coinmarket_GetScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coinmarket.proto",
}
