// Code generated by protoc-gen-go. DO NOT EDIT.
// source: topcollector.proto

package topcollector

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TopCoinData struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Rank                 int32    `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Score                float32  `protobuf:"fixed32,3,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopCoinData) Reset()         { *m = TopCoinData{} }
func (m *TopCoinData) String() string { return proto.CompactTextString(m) }
func (*TopCoinData) ProtoMessage()    {}
func (*TopCoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd4775f75c8f415, []int{0}
}

func (m *TopCoinData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopCoinData.Unmarshal(m, b)
}
func (m *TopCoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopCoinData.Marshal(b, m, deterministic)
}
func (m *TopCoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopCoinData.Merge(m, src)
}
func (m *TopCoinData) XXX_Size() int {
	return xxx_messageInfo_TopCoinData.Size(m)
}
func (m *TopCoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_TopCoinData.DiscardUnknown(m)
}

var xxx_messageInfo_TopCoinData proto.InternalMessageInfo

func (m *TopCoinData) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TopCoinData) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *TopCoinData) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type TopCoinResponse struct {
	Coin                 []*TopCoinData `protobuf:"bytes,1,rep,name=coin,proto3" json:"coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TopCoinResponse) Reset()         { *m = TopCoinResponse{} }
func (m *TopCoinResponse) String() string { return proto.CompactTextString(m) }
func (*TopCoinResponse) ProtoMessage()    {}
func (*TopCoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd4775f75c8f415, []int{1}
}

func (m *TopCoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopCoinResponse.Unmarshal(m, b)
}
func (m *TopCoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopCoinResponse.Marshal(b, m, deterministic)
}
func (m *TopCoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopCoinResponse.Merge(m, src)
}
func (m *TopCoinResponse) XXX_Size() int {
	return xxx_messageInfo_TopCoinResponse.Size(m)
}
func (m *TopCoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopCoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopCoinResponse proto.InternalMessageInfo

func (m *TopCoinResponse) GetCoin() []*TopCoinData {
	if m != nil {
		return m.Coin
	}
	return nil
}

type TopCoinRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopCoinRequest) Reset()         { *m = TopCoinRequest{} }
func (m *TopCoinRequest) String() string { return proto.CompactTextString(m) }
func (*TopCoinRequest) ProtoMessage()    {}
func (*TopCoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd4775f75c8f415, []int{2}
}

func (m *TopCoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopCoinRequest.Unmarshal(m, b)
}
func (m *TopCoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopCoinRequest.Marshal(b, m, deterministic)
}
func (m *TopCoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopCoinRequest.Merge(m, src)
}
func (m *TopCoinRequest) XXX_Size() int {
	return xxx_messageInfo_TopCoinRequest.Size(m)
}
func (m *TopCoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopCoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopCoinRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TopCoinData)(nil), "TopCoinData")
	proto.RegisterType((*TopCoinResponse)(nil), "TopCoinResponse")
	proto.RegisterType((*TopCoinRequest)(nil), "TopCoinRequest")
}

func init() { proto.RegisterFile("topcollector.proto", fileDescriptor_fdd4775f75c8f415) }

var fileDescriptor_fdd4775f75c8f415 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xcf, 0x4a, 0xc6, 0x30,
	0x10, 0xc4, 0x49, 0xff, 0x81, 0xdb, 0x6a, 0x4b, 0x10, 0x09, 0x9e, 0x42, 0x4f, 0x39, 0xe5, 0xd0,
	0xbe, 0x81, 0x0a, 0x9e, 0x44, 0x48, 0x7d, 0x81, 0x36, 0x2e, 0x52, 0xac, 0xd9, 0x98, 0xc6, 0x83,
	0x6f, 0x2f, 0xc4, 0x22, 0x7e, 0xdf, 0x6d, 0x67, 0x97, 0xd9, 0xf9, 0x0d, 0xf0, 0x48, 0xde, 0xd2,
	0xb6, 0xa1, 0x8d, 0x14, 0xb4, 0x0f, 0x14, 0xa9, 0x7f, 0x86, 0xfa, 0x85, 0xfc, 0x3d, 0xad, 0xee,
	0x61, 0x8e, 0x33, 0xbf, 0x81, 0x6a, 0xfa, 0xfe, 0x58, 0x68, 0x13, 0x4c, 0x32, 0x75, 0x61, 0x0e,
	0xc5, 0x39, 0x14, 0x66, 0x76, 0xef, 0x22, 0x93, 0x4c, 0x95, 0x26, 0xcd, 0xfc, 0x1a, 0xca, 0xc9,
	0x52, 0x40, 0x91, 0x4b, 0xa6, 0x32, 0xf3, 0x2b, 0xfa, 0x11, 0xda, 0xe3, 0xa1, 0xc1, 0xdd, 0x93,
	0xdb, 0x91, 0x4b, 0x28, 0x2c, 0xad, 0x4e, 0x30, 0x99, 0xab, 0x7a, 0x68, 0xf4, 0xbf, 0x40, 0x93,
	0x2e, 0x7d, 0x07, 0x57, 0x7f, 0xa6, 0xcf, 0x2f, 0xdc, 0xe3, 0x70, 0x07, 0x4d, 0xda, 0x1c, 0xb4,
	0x7c, 0x80, 0xcb, 0x47, 0x8c, 0x4f, 0x18, 0xde, 0xf0, 0x35, 0x91, 0xb6, 0xfa, 0xd4, 0x71, 0xdb,
	0xe9, 0xb3, 0xdc, 0xa5, 0x4a, 0x15, 0xc7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xa5, 0x96,
	0x70, 0xf8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TopCollectorClient is the client API for TopCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopCollectorClient interface {
	GetMergedData(ctx context.Context, in *TopCoinRequest, opts ...grpc.CallOption) (*TopCoinResponse, error)
}

type topCollectorClient struct {
	cc *grpc.ClientConn
}

func NewTopCollectorClient(cc *grpc.ClientConn) TopCollectorClient {
	return &topCollectorClient{cc}
}

func (c *topCollectorClient) GetMergedData(ctx context.Context, in *TopCoinRequest, opts ...grpc.CallOption) (*TopCoinResponse, error) {
	out := new(TopCoinResponse)
	err := c.cc.Invoke(ctx, "/TopCollector/GetMergedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopCollectorServer is the server API for TopCollector service.
type TopCollectorServer interface {
	GetMergedData(context.Context, *TopCoinRequest) (*TopCoinResponse, error)
}

// UnimplementedTopCollectorServer can be embedded to have forward compatible implementations.
type UnimplementedTopCollectorServer struct {
}

func (*UnimplementedTopCollectorServer) GetMergedData(ctx context.Context, req *TopCoinRequest) (*TopCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergedData not implemented")
}

func RegisterTopCollectorServer(s *grpc.Server, srv TopCollectorServer) {
	s.RegisterService(&_TopCollector_serviceDesc, srv)
}

func _TopCollector_GetMergedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopCollectorServer).GetMergedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TopCollector/GetMergedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopCollectorServer).GetMergedData(ctx, req.(*TopCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TopCollector",
	HandlerType: (*TopCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMergedData",
			Handler:    _TopCollector_GetMergedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "topcollector.proto",
}
